import { TransactionResponse } from '@ethersproject/abstract-provider';
import { BigNumber, BigNumberish, ContractTransaction, ethers } from 'ethers';
import { EthMessageSigner } from './eth-message-signer';
import { Signer } from './signer';
import { Address, ChangePubKeyData, ChangePubKeyEntries, ContractData, ContractMatchingData, ContractMatchingEntries, Create2Data, EthSignerType, ForcedExitData, ForcedExitEntries, L1ChainId, Nonce, OrderData, OrderMatchingData, OrderMatchingEntries, PubKeyHash, SignedTransaction, TokenAddress, TokenId, TransferData, TransferEntries, TxEthSignature, WithdrawData, WithdrawEntries } from './types';
export declare class Wallet {
    ethSigner: ethers.Signer;
    ethMessageSigner: EthMessageSigner;
    cachedAddress: Address;
    signer?: Signer;
    accountId?: number;
    ethSignerType?: EthSignerType;
    private constructor();
    static fromEthSigner(ethWallet: ethers.Signer, signer?: Signer, accountId?: number, ethSignerType?: EthSignerType): Promise<Wallet>;
    static fromCreate2Data(syncSigner: Signer, createrSigner: ethers.Signer, create2Data: Create2Data, accountId?: number): Promise<Wallet>;
    static fromEthSignerNoKeys(ethWallet: ethers.Signer, accountId?: number, ethSignerType?: EthSignerType): Promise<Wallet>;
    getEIP712Signature(data: any): Promise<TxEthSignature>;
    getTransferData(entries: TransferEntries): TransferData;
    signTransfer(entries: TransferEntries): Promise<SignedTransaction>;
    getForcedExitData(entries: ForcedExitEntries): ForcedExitData;
    signForcedExit(entries: ForcedExitEntries): Promise<SignedTransaction>;
    signOrder(entries: OrderData): Promise<SignedTransaction>;
    getOrderMatchingData(entries: OrderMatchingEntries): OrderMatchingData;
    signOrderMatching(entries: OrderMatchingEntries): Promise<SignedTransaction>;
    signContract(entries: ContractData): Promise<SignedTransaction>;
    getContractMatchingData(entries: ContractMatchingEntries): ContractMatchingData;
    signContractMatching(entries: ContractMatchingEntries): Promise<SignedTransaction>;
    getWithdrawData(entries: WithdrawEntries): WithdrawData;
    signWithdrawToEthereum(entries: WithdrawEntries): Promise<SignedTransaction>;
    isSigningKeySet(currentPubKeyHash: PubKeyHash): Promise<boolean>;
    getChangePubKeyData(entries: ChangePubKeyEntries): Promise<ChangePubKeyData>;
    signChangePubKey(entries: ChangePubKeyEntries): Promise<SignedTransaction>;
    isOnchainAuthSigningKeySet(mainContract: Address, nonce: Nonce): Promise<boolean>;
    onchainAuthSigningKey(mainContract: Address, nonce: Nonce, currentPubKeyHash: PubKeyHash, ethTxOptions?: ethers.providers.TransactionRequest): Promise<ContractTransaction>;
    address(): Address;
    getEthereumBalance(tokenAddress: TokenAddress): Promise<BigNumber>;
    estimateGasDeposit(tx: ethers.providers.TransactionRequest): Promise<BigNumber>;
    getERC20DepositsAllowance(mainContract: Address, tokenAddress: Address, accountAddress: Address): Promise<BigNumber>;
    isERC20DepositsApproved(mainContract: Address, tokenAddress: Address, accountAddress: Address, erc20ApproveThreshold?: BigNumber): Promise<boolean>;
    approveERC20TokenDeposits(mainContract: Address, tokenAddress: Address, max_erc20_approve_amount?: BigNumber): Promise<TransactionResponse>;
    sendDepositFromEthereum(deposit: {
        chainId: L1ChainId;
        mainContract: Address;
        subAccountId: number;
        depositTo: Address;
        token: TokenAddress;
        amount: BigNumberish;
        mapping?: boolean;
        ethTxOptions?: ethers.providers.TransactionRequest;
        approveDepositAmountForERC20?: boolean;
    }): Promise<TransactionResponse>;
    emergencyWithdraw(withdraw: {
        mainContract: Address;
        tokenId: TokenId;
        subAccountId: number;
        accountId: number;
        ethTxOptions?: ethers.providers.TransactionRequest;
    }): Promise<TransactionResponse>;
    private modifyEthersError;
    requireAccountId(accountId: number, msg: string): void;
    requireNonce(nonce: number, msg: string): void;
}
